var express = require("express");
var admin = require("firebase-admin");
var firebase= require("firebase");
var bodyParser = require("body-parser");
var speakeasy = require("speakeasy");
var QRCode = require("qrcode");
var nodemailer = require("nodemailer")

var api = express.Router();

const mailTransport = nodemailer.createTransport({
    service: "gmail",
})

app.use(bodyParser.urlencoded({
    extended: true
}));


app.use(function(req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    next();
  });

 var db = admin.database();
 
 var setSecretKey = function (key, uid){
     db.ref().child("Users/" + uid / "/token").set(key)
 }

 var getSecretKey = function (uid){
    return db.ref("Users/" + uid + "/token").once("value")
           .then( function (snapshot){
                return snapshot.val();
           })
 }

var updateSecretKey = function (uid, token){
    token.secret = token.tempSecret;
    token.activated = true;
    setSecretKey(token,uid);
}

var deleteSecretKey = function(uid){
    var token = {enabled: false, activated: false};
    setSecretKey(token,uid);
}

var sendQRCode = function (data_url,res){
    const mailOptions = {
        from: "'Vision sharekey' <noreply@firebase.com>",
        to: response.email,
        subject: "Has activado la opción de 2FA",
        html: '<h3>Activación de 2FA</h3>' +
              '<p><br>' + 
              'Es necesario que escanee el código QR a través de Google Autenticator o Authy.</p><br>' + 
              '<b>Codigo:</b> <img src="cid:qrcode"/>',
          attachments: [{
          filename: "image.png",
          path: data_url,
          cid: "qrcode" //same cid value as in the html img src
      }]
      };

    console.log(mailOptions.html)  

    return mailTransport.sendMail(mailOptions)
      .then(() => {
          console.log("mail sent")
      }).catch((error) => console.error("There was an error while sending the email:",error));
}

var verifySecret = function(otp, uid) {
    return new Promise((resolve, reject) => {
    getSecretKey(uid)
        .then((token) => {
            if (token.activated) {
                reject("ERROR.2FA.user_is_verified");
            }
            var verified = speakeasy.totp.verify({
                secret: token.tempSecret, // Secret of the logged in user
                encoding: "base32",
                token: otp
            });
            if (verified) {
                console.log("107");
                console.log("USER Is VERIFIED");
                // we need to update the secret
                updateSecretKey(uid, token)
                resolve("SUCCESS");
            }
            else {
                console.log("NOT VALID OTP");
                reject("ERROR.2FA.invalid_otp");
            }
        })
        .catch((error) => {
            console.log("WHAT HAPPENED");
            console.log(error);
            reject(error);
        });
    });
};

var verifyOTP = function(uid, otp) {
    getSecretKey(uid)
    .then((user) => {
        var verified = speakeasy.totp.verify({
            secret: user.secret,
            encoding: "base32",
            token: otp,
            window: 2
        });
        if (verified){
            return "SUCCESS";
        }
        return "ERROR.2FA.invalid_otp";
    })
    .catch((error) => {
        return error;
    });
}

// Verifies the ID Token generated by Firebase Auth on the Console
var verifyUser = function(token) {
    return new Promise((resolve, reject) => {
    admin.auth()
        .verifyIdToken(token)
        .then((user) => {
            // If user email is verified we can activate 2FA
            // if (user.email_verified) {
                resolve(user);
            //} else {
            //    reject("NO_VERIFIED_EMAIL");
            //}

        })
        .catch((error) => {
            console.log("143");
            console.log(error);
            reject ("ERROR.2FA.invalid_id_token");
        })
    }) 
};

api.post('/enale2auth', function (){
    verifyUser(req.body.uid).then((user) => {
        const secret = speakeasy.generateSecret({length: 10});
        var url = speakeasy.otpauthURL({secret: secret.ascii, label: 'sharekey', algorithm: 'sha512'});
        QRCode.toDataURL(url, (err,data_url)=> {
            setSecretKey({
                tempSecret: secret.base32,
                dataURL: data_url,
                otpURL: url,
                activated: false,
                enabled: true,
            },user.uid);
            sendCodeToEmail(data_url,user);
            return res.json({
                message: "Verify_otp",
                tempSecret: secret.base32,
                dataURL,
                otpURL: secret.otpauth_url,
            });
        });
    }).catch((error) => {
        return res.status(400).send(error);
    })
})